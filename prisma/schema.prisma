// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mmr           Int @default(0)
  role          Role @default(USER)
  dotabuff      String?
  Signup        Signup?
  banned       Boolean @default(false)
  drafting    Boolean @default(false)


  

}

enum Role {
  ADMIN
  USER
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Signup {
  id        Int   @id @default(autoincrement()) 
  user      User  @relation(fields: [userId], references: [id])
  userId    String @unique
  activityCheck Boolean @default(false)
  soldFor      Int? 
  currentBid  Int? @default(0)
  team          Team? @relation(name:"team",fields: [teamId], references: [id])
  teamId        Int?
  test         Boolean @default(false)
  captainedTeam Team? @relation(name:"captain")
  draftingFor  Team? @relation(name:"drafter")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        Int   @id @default(autoincrement()) 
  name      String 
  coins     Int @default(0)
  captain   Signup?  @relation(name: "captain", fields: [captainId], references: [id])
  captainId Int? @unique
  division  Division @relation(fields: [divisionId], references: [id])
  divisionId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  players   Signup[] @relation(name: "team")
  drafter   Signup? @relation(name: "drafter", fields: [drafterId], references: [id])
  drafterId  Int? @unique
  }

model Division {
  id        Int   @id @default(autoincrement()) 
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]  
  
}

model Draft {
  id       Int   @id @default(autoincrement()) 
  index   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  }
